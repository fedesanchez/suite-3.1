.. _processing.scripting.processcomposite:

Executing existing processes with a script
==========================================

This tutorial will show how to create a script that executes existing :term:`WPS` processes. As the scripting engine has bindings for both Python and JavaScript, examples from both languages will be shown here.

Process definition
------------------

This tutorial will create a process called **"Buffer and Split"**. As its name suggests, it will combine two separate processes, Buffer (``JTS:Buffer``) and Split Polygon (``JTS:SplitPolygon``). The Buffer process takes as input any geometry and a distance value, and returns a polygon representing the input geometry enlarged by the given distance around its exterior. The Split Polygon process takes as inputs a geometry (usually a polygon) and a linestring, and returns a geometry (usually a geometry collection) generated by splitting the input geometry by the linestring.

The Buffer and Split operation combines these two processes in the following way:  it takes as input a geometry, a linestring, and a distance value. The input geometry is buffered by the distance value, and the resulting polygon is split by the linestring. The result, in all but the most trivial cases, will be a polygon or a geometry collection.

.. figure:: img/processcomposite_theory.png

   *Buffer and Split process*

Distance is measured in the same units as the source geometry. It will be assumed that all input geometries are represented in the same units and coordinate reference system.

.. note:: There are optional inputs to these two source processes that won't be provided in our script. In cases where optional process inputs are omitted, the processes will use defaults. To see more details about the ``JTS:buffer`` and ``JTS:splitPolygon`` processes, as well as a list of every process published in GeoServer, please go to the GeoServer web admin page and click on :guilabel:`WPS Processes`.

Authoring the script
--------------------

The complete scripts are below:

**Python** (:download:`download <bufferSplit.py>`):

.. literalinclude:: bufferSplit.py
   :language: python

**JavaScript** (:download:`download <bufferSplit.js>`):

.. literalinclude:: bufferSplit.js
   :language: javascript

Save as :file:`bufferSplit.py` or :file:`bufferSplit.js`, depending on the language used. 

A description of the script functionality follows.

Process headers
~~~~~~~~~~~~~~~

The script requires a number of import statements, including geometry types and WPS process hooks. In particular, the Buffer and SplitPolygon processes are pulled in here for use later on.

**Python**

.. literalinclude:: bufferSplit.py
   :language: python
   :lines: 1-6

**JavaScript**

.. literalinclude:: bufferSplit.js
   :language: javascript
   :lines: 1-4

Process inputs and metadata
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next define the process inputs and metadata. Enclose all of these definitions in a process block:

**Python**

.. literalinclude:: bufferSplit.py
   :language: python
   :lines: 8,7,19

**JavaScript**

.. literalinclude:: bufferSplit.js
   :language: javascript
   :lines: 6,5,40

Add a title and description for better readability:

**Python**

.. literalinclude:: bufferSplit.py
   :language: python
   :lines: 9-10

**JavaScript**

.. literalinclude:: bufferSplit.js
   :language: javascript
   :lines: 7-8

The process has three inputs as described above: a geometry (``geom``), a distance (``dist``) value to use when buffering the geometry, and a line (``line``) to use to split the subsequent geometry. Create the inputs list with these three definitions, along with a description:

**Python**

.. literalinclude:: bufferSplit.py
   :language: python
   :lines: 11-15

**JavaScript**

.. literalinclude:: bufferSplit.js
   :language: javascript
   :lines: 9-25

The single output (``result``) will return a geometry, and is defined similarly:

**Python**

.. literalinclude:: bufferSplit.py
   :language: python
   :lines: 16-18

**JavaScript**

.. literalinclude:: bufferSplit.js
   :language: javascript
   :lines: 26-32


Process computation
~~~~~~~~~~~~~~~~~~~

Now that the inputs and outputs are defined, next create the computation through a function called ``run``. This function has only two steps. The first step buffers the ``geom`` by the ``dist`` value, and the result is stored in the ``buffered`` variable. The second step splits the ``buffered`` geometry by the ``line``. The final geometry is then returned.

**Python**

.. literalinclude:: bufferSplit.py
   :language: python
   :lines: 20-23

**JavaScript**

.. literalinclude:: bufferSplit.js
   :language: javascript
   :lines: 33-39



Activating the script
---------------------

After the script is written, it must be added to GeoServer. Place the script in the GeoServer data directory in the location: :file:`<data_dir>/scripts/wps/`. (Create this path if it doesn't already exist.) The script will be activated automatically when copied to that location, with *no server restart necessary*.

.. todo:: You can also upload scripts through the REST API. Please see the section on processing.scripting.rest for more details.


Testing the script
------------------

Once the script is in place and activated, the next step is to test it. Use the WPS Request Builder in the GeoServer UI to verify this script's functionality.

#. Access the WPS Request Builder in the GeoServer UI by clicking on :guilabel:`Demos` then :guilabel:`WPS Request Builder`.

   .. figure:: img/demos.png

   .. figure:: img/requestbuilder.png

      *Accessing the WPS Request Builder*

#. Select the process in the menu. It will be named :file:`py:bufferSplit` or :file:`js:bufferSplit`, depending on the language used.

   .. figure:: img/processcomposite_list.png

      *Scripts listed as WPS processes*

#. Fill out the form. The following values will work for testing:

   .. list-table::
      :header-rows: 1

      * - Input
        - Value
      * - ``line``
        - ``LINESTRING(-4 0, 4 0)``
      * - ``geom``
        - ``LINESTRING(0 -1, 0 1)``
      * - ``dist``
        - ``1``

   Enter these values in the form, making sure to select sure to select :guilabel:`TEXT` and :guilabel:`application/wkt` as the source format for each input and output.

   .. figure:: img/processcomposite_line.png

      *Input line*

   .. figure:: img/processcomposite_geom.png

      *Input geometry*

   .. figure:: img/processcomposite_dist.png

      *Input distance*

   .. figure:: img/processcomposite_result.png

      *Result format*

#. Click on :guilabel:`Execute process`.

   .. note:: If you are curious about what the actual process request looks like, click on :guilabel:`Generate XML from process inputs/outputs`.

#. The output will look something like this::

     GEOMETRYCOLLECTION
       (POLYGON ((1 0, 1 -1, 0.9807852804032304 -1.1950903220161282,
       0.9238795325112867 -1.3826834323650898, 0.8314696123025452 -1.5555702330196022,
       0.7071067811865476 -1.7071067811865475, 0.5555702330196023 -1.8314696123025453,
       0.3826834323650898 -1.9238795325112867, 0.1950903220161283 -1.9807852804032304,
       0.0000000000000001 -2, -0.1950903220161282 -1.9807852804032304,
       -0.3826834323650897 -1.9238795325112867, -0.555570233019602
       -1.8314696123025453, -0.7071067811865475 -1.7071067811865475,
       -0.8314696123025453 -1.5555702330196022, -0.9238795325112868
       -1.3826834323650894, -0.9807852804032305 -1.1950903220161277, -1 -1, -1 0, 1
       0)), POLYGON ((-1 1, -0.9807852804032304 1.1950903220161286,
       -0.9238795325112867 1.3826834323650898, -0.8314696123025453 1.5555702330196022,
       -0.7071067811865475 1.7071067811865475, -0.555570233019602 1.8314696123025453,
       -0.3826834323650897 1.9238795325112867, -0.1950903220161282 1.9807852804032304,
       0.0000000000000001 2, 0.1950903220161283 1.9807852804032304, 0.3826834323650898
       1.9238795325112867, 0.5555702330196021 1.8314696123025453, 0.7071067811865476
       1.7071067811865475, 0.8314696123025453 1.5555702330196022, 0.923879532511287
       1.3826834323650894, 0.9807852804032305 1.1950903220161275, 1 1, 1 0, -1 0, -1
       1)))

   Or, graphically:

   .. figure:: img/processcomposite_example.png

      *Buffer and Split example*

   .. note:: The curved nature of the output geometry stems from the default values of the ``JTS:Buffer`` inputs ``capStyle`` and ``quadrantSegments``, which are set to ``Round`` and ``8``, respectively. These values can be explicitly set in the script, either by hard coding the values in the process call, or by adding new inputs to the process.
